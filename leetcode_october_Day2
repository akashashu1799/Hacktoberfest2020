/*
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
*/



class Solution {
public:
    
    void find_combisum(vector<int> current,vector<vector<int>> &result,vector<int> choices,int target,int start)
    {
        if(target<0)
            return;
        
        if(target==0)
        {
             result.push_back(current);
             return;
        }
        
        for(int i=start;i<choices.size();i++)
        {
            if(choices[i]>target)
            break;
            current.push_back(choices[i]);
            find_combisum(current,result,choices,target-choices[i],i);
            current.pop_back();
        }
          
        
    }
    
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> result;
        sort(candidates.begin(),candidates.end());
        vector<int> current;
        int start=0;
        find_combisum(current,result,candidates,target,start);
        return result;
    }
};
