/*
Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i, j < nums.length
i != j
a <= b
b - a == k
 

Example 1:

Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.


*/


class Solution {
public:
    /*int findPairs(vector<int>& nums, int k) 
    {
         //[3,1,4,1,5]
        
        if(k==0) return 1;
        set<int> numbers;
        set<pair<int,int>> result;
        
        for(int i=0;i<nums.size();i++)
        {
            numbers.insert(nums[i]);
        }
        for(auto x:nums)
        {
            if(numbers.find(x+k)!=numbers.end())
            {
                result.insert(make_pair(x,x+k));
            }
        }
        
        return result.size();
        
    }*/
    int findPairs(vector<int>& nums, int k) {
		  set<pair<int,int>> unq;
          unordered_map<int,int> m;
        
          sort(nums.begin(),nums.end());
        
          for(int i=0;i<nums.size();i++)
           {
            int temp=nums[i]-k;
            if(m.find(temp)!=m.end())
            {
                unq.insert(make_pair(nums[i],k-nums[i]));
                
            }
            m[nums[i]]=1;
        }
        
        return unq.size();
     } 
};
